name: PR tests

on:
  pull_request:
    branches: [next, main]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: pr-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.filter.outputs.run }}
    steps:
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            run:
              - '**'
              - '!README.md'
              - '!LICENSE'
              - '!docs/**'
              - '!.github/**'

  get_node_versions:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: changes
    if: needs.changes.outputs.run == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      node_versions: ${{ steps.parse.outputs.node_versions }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install deps
        run: npm ci --prefer-offline

      - name: Parse Node engines
        id: parse
        run: |
          node_versions_str=$(jq -r '.engines.node' "package.json")
          echo "Upstream engines.node = $node_versions_str"

          # Use semver to extract lowest versions per range
          node_versions=$(node -e "
          const semver = require('semver');
          const range = process.argv[1];
          const parts = range.split('||').map(r => r.trim());
          const mins = parts.map(r => semver.minVersion(r).version);
          console.log(JSON.stringify(mins));
          " "$node_versions_str")

          echo "Lowest versions: $node_versions"
          echo "node_versions=$node_versions" >> $GITHUB_OUTPUT

  test-integration:
    runs-on: ubuntu-latest
    needs: [changes, get_node_versions]
    if: needs.changes.outputs.run == 'true' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 30
    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        node-version: ${{ fromJSON(needs.get_node_versions.outputs.node_versions) }}
        include:
          # Active LTS + other OS
          - os: macos-latest
            node_version: 22
          - os: windows-latest
            node_version: 22
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm ci --no-audit --no-fund --prefer-offline
      - run: npm run build
      - run: npm run test:ci

  test-publish:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.run == 'true' || github.event_name == 'workflow_dispatch'

    services:
      verdaccio:
        image: verdaccio/verdaccio:6
        ports:
          - 4873:4873

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build --if-present

      - name: Dry-run publish to npm.js registry
        run: npm publish --dry-run

      - name: Login to Verdaccio
        run: |
          npx npm-cli-login \
            -u test \
            -p 1234 \
            -e test@domain.test \
            -r http://localhost:4873

      - name: Publish to Verdaccio registry
        run: npm publish
        env:
          npm_config_registry: http://localhost:4873

      - name: Verify package metadata
        run: npm info ${{ github.event.repository.name }} --json
        env:
          npm_config_registry: http://localhost:4873

      - name: Install globally from Verdaccio
        run: npm install -g ${{ github.event.repository.name }}
        env:
          npm_config_registry: http://localhost:4873

      - name: Run publish tests
        run: npm run test:publish
        env:
          npm_config_registry: http://localhost:4873

  test-semantic-release:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.run == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # semantic-release needs full history

      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - run: npm ci
      - run: npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
